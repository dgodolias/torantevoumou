@page
@model Namespace.Heatmap
@{
  ViewData["Title"] = "Όλα τα ραντεβού μου";
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yearly Calendar</title>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
        }

        .zoom-controls {
            position: absolute;
            top: 20px;
            left: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .zoom-controls button {
            background: none;
            cursor: pointer;
            margin-bottom: 5px;
            font-size: 20px;
            width: 40px;
            height: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
        }

        #big-container-wrapper {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
        }

        #big-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            transform-origin: top center;
            transition: transform 0.3s ease;
        }

        .solid-container {
            display: block;
            flex-direction: column;
            align-items: center;
            width: fit-content;
            height: fit-content;
        }

        #search-services-bar {
            width: 100%;
            align-items: center;
            display: flex;
            justify-content: center;
        }

        #current-year {
            font-size: 38px;
            text-shadow: 3px 1px 5px rgb(97 148 155 / 90%);
            color: rgb(255 255 255 / 50%);
            font-family: fantasy;
        }

        .year-navigation {
            justify-content: center;
            width: 100%;
            display: flex;
            align-items: center;
            margin: 20px 0;
        }

        .year-navigation button {
            margin: 0 10px;
            padding: 5px 10px;
            background: none;
            border: none;
            cursor: pointer;
        }

        .arrow-icon {
            width: 30px;
            height: 30px;
            vertical-align: middle;
        }

        .rotate-left {
            transform: rotate(90deg);
        }

        .rotate-right {
            transform: rotate(-90deg);
        }

        .filter-container {
            width: 25%;
            display: flex;
            align-items: center;
            margin: 0 10px;
        }

        .calendar-container {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            width: 90%;
        }

        .month-container {
            display: flex;
            justify-content: center;
            align-items: stretch;
            width: 100%;
        }

        .calendar {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: stretch;
        }

        a.ui-state-default {
            border-radius: 6px;
            cursor: pointer;
        }

        .ui-datepicker-header.ui-widget-header.ui-helper-clearfix.ui-corner-all {
            background: rgb(181 255 252);
        }

        .ui-datepicker {
            width: 100%;
            background-color: #fff;
            border: 1px solid #ddd;
            color: #333;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            height: 100%;
        }

        .ui-datepicker-header {
            background-color: #f0f0f0;
            border: none;
        }

        .ui-datepicker-calendar {
            width: 100%;
        }

        .calendar.hasDatepicker {
            width: 100%;
        }

        .ui-datepicker td a {
            border: 1px solid #c5c5c5;
            background: #f6f6f6;
            font-weight: normal;
            color: #454545;
        }

        .ui-datepicker td a.ui-state-highlight,
        .ui-widget-content .ui-state-highlight,
        .ui-widget-header .ui-state-highlight,
        .highlight a {
            border: 1px solid #000000 !important;
            background: #ffa7d9 !important;
            color: #000000 !important;
        }

        .ui-datepicker .ui-datepicker-today a,
        .ui-datepicker .ui-datepicker-current-day a,
        .ui-datepicker .ui-state-active {
            border: 1px solid #c5c5c5 !important;
            background: #f6f6f6 !important;
            color: #454545 !important;
        }

        .ui-datepicker .ui-datepicker-prev,
        .ui-datepicker .ui-datepicker-next {
            display: none;
        }

        .appointment-dialog {
            display: none;
            position: absolute;
            background: white;
            border: 1px solid #ccc;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            padding: 10px;
            z-index: 10;
            border-radius: 5px;
        }

        select#service-filter {
            width: 100%;
            box-shadow: 3px 1px 5px rgb(97 148 155 / 90%);
            border: transparent;
        }

        /* New style for ui-datepicker-today a */
        .ui-datepicker .ui-datepicker-today a {
            background-color: lightgreen; /* Light green background */
        }
    </style>
</head>

<body>
    <div class="zoom-controls">
        <button id="zoom-in">➕</button>
        <button id="zoom-out">➖</button>
    </div>
    <div id="big-container-wrapper">
        <div id="big-container">
            <div class="solid-container">
                <div class="solid-container" id="search-services-bar">
                    <div class="year-navigation">
                        <button id="prev-year"><img src="img/arrow-down.png" alt="Previous Year"
                                class="arrow-icon rotate-left"></button>
                        <div id="current-year">2024</div>
                        <button id="next-year"><img src="img/arrow-down.png" alt="Next Year"
                                class="arrow-icon rotate-right"></button>
                        <div class="filter-container">
                            <select id="service-filter">
                                <!-- Options will be dynamically populated here -->
                            </select>
                        </div>
                    </div>
                </div>
                <div class="solid-container">
                    <div class="outside-calendar-container" id="outside-calendar-container">
                        <div class="calendar-container" id="calendar-container">
                            <!-- Month calendars will be generated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="appointment-dialog" class="appointment-dialog" title="Appointments">
        <p id="appointment-times"></p>
    </div>

    <script>
        let currentScale = 1;

        document.getElementById('zoom-in').addEventListener('click', function () {
            if (currentScale < 2) {
                currentScale += 0.1;
                document.getElementById('big-container').style.transform = `scale(${currentScale})`;
                localStorage.setItem('calendarScale', currentScale);
            }
        });

        document.getElementById('zoom-out').addEventListener('click', function () {
            if (currentScale > 0.5) {
                currentScale -= 0.1;
                document.getElementById('big-container').style.transform = `scale(${currentScale})`;
                localStorage.setItem('calendarScale', currentScale);
            }
        });

        document.addEventListener('DOMContentLoaded', function () {
            const savedScale = localStorage.getItem('calendarScale');
            if (savedScale) {
                currentScale = parseFloat(savedScale);
                document.getElementById('big-container').style.transform = `scale(${currentScale})`;
            }
        });

    let UserDetailedAppointments = sessionStorage.getItem('UserDetailedAppointments');
    let ServiceJustKeysAppointments = sessionStorage.getItem('ServiceJustKeysAppointments');

    // Parse the JSON strings from sessionStorage
    UserDetailedAppointments = JSON.parse(UserDetailedAppointments);
    ServiceJustKeysAppointments = JSON.parse(ServiceJustKeysAppointments);

    // Create a mapping from appointment IDs to service names
    const idToServiceNameMap = {};
    for (const [serviceName, ids] of Object.entries(ServiceJustKeysAppointments)) {
        ids.forEach(id => {
            idToServiceNameMap[id] = serviceName;
        });
    }

    // Add ServiceName to each appointment
    UserDetailedAppointments.forEach(appointment => {
        appointment.ServiceName = idToServiceNameMap[appointment.AID];
    });

    // Create a dictionary to store appointments by service and date
    const data = {};

    // Iterate through the appointments and group them by service and date
    UserDetailedAppointments.forEach(appointment => {
        const serviceName = appointment.ServiceName;
        const appointmentDate = appointment.appointmentDate;
        const appointmentTime = appointment.appointmentTime;

        if (!data[serviceName]) {
            data[serviceName] = {};
        }

        if (!data[serviceName][appointmentDate]) {
            data[serviceName][appointmentDate] = [];
        }

        data[serviceName][appointmentDate].push(appointmentTime);
    });

    // Now the 'data' variable contains the appointments in the desired format
    console.log(data);
        


        // Populate the service filter dropdown
        function populateServiceFilter() {
            const serviceFilter = $('#service-filter');
            serviceFilter.empty();
            const services = Object.keys(data);
            if (services.length > 0) {
                serviceFilter.append('<option value="all">Ολες οι υπηρεσιες</option>');
            }
            for (const service of services) {
                serviceFilter.append(`<option value="${service}">${service.charAt(0).toUpperCase() + service.slice(1)}</option>`);
            }
            // If no services exist, add a default option
            if (services.length === 0) {
                serviceFilter.append('<option value="none">No services available</option>');
            }
        }

        let currentYear = 2024;
        let dialogTimeout;

        function updateYear() {
            $('#current-year').text(currentYear);
            generateCalendars(currentYear);
        }

        function generateCalendars(year) {
            $('#calendar-container').empty();
            for (let month = 0; month < 12; month++) {
                const monthContainer = $('<div>').addClass('month-container');
                const calendar = $('<div>').addClass('calendar').attr('id', `calendar-${month}`);
                monthContainer.append(calendar);
                $('#calendar-container').append(monthContainer);

                $(`#calendar-${month}`).datepicker({
                    showButtonPanel: false,
                    changeMonth: false,
                    changeYear: false,
                    dateFormat: 'yy-mm-dd',
                    defaultDate: new Date(year, month, 1),
                    beforeShowDay: function (date) {
                        const selectedService = $('#service-filter').val();
                        const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
                        let isHighlighted = false;
                        if (selectedService === "all") {
                            for (let service in data) {
                                if (data[service][dateStr]) {
                                    isHighlighted = true;
                                    break;
                                }
                            }
                        } else if (selectedService !== "none") {
                            if (data[selectedService][dateStr]) {
                                isHighlighted = true;
                            }
                        }
                        return [true, isHighlighted ? 'highlight' : ''];
                    },
                    onChangeMonthYear: function (year, month, inst) {
                        setTimeout(() => {
                            $(`#calendar-${month} .ui-datepicker-current-day`).removeClass('ui-datepicker-current-day');
                            $(`#calendar-${month} .ui-state-active`).removeClass('ui-state-active').attr('aria-current', 'false');
                        }, 1);
                    },
                    onSelect: function (dateText, inst) {
                        setTimeout(() => {
                            $(`#calendar-${month} .ui-datepicker-current-day`).removeClass('ui-datepicker-current-day');
                            $(`#calendar-${month} .ui-state-active`).removeClass('ui-state-active').attr('aria-current', 'false');
                        }, 1);
                    }
                });

                // Ensure no cells have ui-state-active class after rendering
                setTimeout(() => {
                    $(`#calendar-${month} .ui-datepicker-current-day`).removeClass('ui-datepicker-current-day');
                    $(`#calendar-${month} .ui-state-active`).removeClass('ui-state-active').attr('aria-current', 'false');
                }, 1);
            }

            // Add hover event listener to highlighted cells
            $(document).on('mouseenter', '.highlight a', function (event) {
                if (!$(this).data('clicked')) {
                    showAppointmentDialog($(this), event);
                }
            });

            $(document).on('mouseleave', '.highlight a', function () {
                if (!$(this).data('clicked')) {
                    hideAppointmentDialog();
                }
            });

            // Add click event listener to highlighted cells
            $(document).on('click', '.highlight a', function (event) {
                event.stopPropagation();
                $('.highlight a').data('clicked', false); // Reset all click states
                $(this).data('clicked', true);
                clearTimeout(dialogTimeout);
                showAppointmentDialog($(this), event);
                dialogTimeout = setTimeout(hideAppointmentDialog, 3000);
            });

            // Hide the dialog on clicking outside
            $(document).on('click', function () {
                hideAppointmentDialog();
            });
        }

        function showAppointmentDialog(element, event) {
            const date = element.text();
            const month = element.closest('.calendar').attr('id').split('-')[1];
            const dateStr = `${currentYear}-${String(parseInt(month) + 1).padStart(2, '0')}-${String(date).padStart(2, '0')}`;
            let appointmentDetails = {};
            const selectedService = $('#service-filter').val();

            if (selectedService === "all") {
                for (let service in data) {
                    if (data[service][dateStr]) {
                        if (!appointmentDetails[service]) {
                            appointmentDetails[service] = [];
                        }
                        appointmentDetails[service] = appointmentDetails[service].concat(data[service][dateStr]);
                    }
                }
            } else {
                if (data[selectedService][dateStr]) {
                    appointmentDetails[selectedService] = data[selectedService][dateStr];
                }
            }

            let appointmentText = '';
            for (let service in appointmentDetails) {
                appointmentText += `${service}: ${appointmentDetails[service].join(', ')}<br>`;
            }

            if (appointmentText) {
                $('#appointment-times').html(appointmentText);
                $('#appointment-dialog').css({
                    display: 'block',
                    left: event.pageX + 15,
                    top: event.pageY + 15
                });
            }
        }

        function hideAppointmentDialog() {
            $('#appointment-dialog').css('display', 'none');
            $('.highlight a').data('clicked', false);
        }

        $('#prev-year').on('click', () => {
            currentYear--;
            updateYear();
        });

        $('#next-year').on('click', () => {
            currentYear++;
            updateYear();
        });

        $('#service-filter').on('change', () => {
            generateCalendars(currentYear);
        });

        $(document).ready(() => {
            populateServiceFilter();
            updateYear();
        });
    </script>
</body>

</html>